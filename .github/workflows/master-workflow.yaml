name: Build Images

on:
  # we want pull requests so we can build(test) but not push to image registry
  push:
    branches:
      - 'main'
    paths:
      - 'result/**'
      - 'vote/**'
      - 'worker/**'
      - '.github/workflows/master-workflow.yaml'

  pull_request:
    branches:
      - 'main'
    paths:
      - 'result/**'
      - 'vote/**'
      - 'worker/**'
      - '.github/workflows/master-workflow.yaml'

jobs:

  ResultTest:
    
    runs-on: ubuntu-latest
    
    defaults:
     run:
      working-directory: result
       
    
    # Setup multiple node versions to test
    strategy:
      matrix:
        node: [14, 16, 18, 20]

    steps:
      - uses: actions/checkout@v5

      - name: Use node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      
      # Install npm dependencies before build
      - name: Check Dependencies
        run:  | 
          npm ci && \
          npm cache clean --force
      - name: Remove Dependencies to build image
        run: rm -rf node_modules

  VoteTest:

    runs-on: ubuntu-latest
    
    defaults:
     run:
       working-directory: vote

    strategy:
      matrix:
        python: ['3.13', '3.12', '3.11']

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      # Check Library Compatibility
      - name: Check libraries compatibility
        run: pip install -r requirements.txt
      - name: Uninstall Libraries
        run: pip uninstall -y -r requirements.txt
  
  
  ContainerRegistry:
    
    runs-on: ubuntu-latest
    needs: [ ResultTest, VoteTest ]
    outputs:
      vote_name: ${{ steps.vote_name.output.VOTE_REPO }}
      result_name: ${{ steps.vote_name.output.RESULT_REPO }}
      worker_name: ${{ steps.vote_name.output.WORKER_REPO }}
    env:
      TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
      - uses: actions/checkout@v5
        with:
          repository: AnaaaKareem/vote-iac
          ref: 'main'
          token: ${{ secrets.TERRAFORM_REPO_TOKEN }}
      
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Apply
        id: Apply
        run: terraform apply -auto-approve -no-color

      - name: Terraform Vote Name
        id: vote_name
        run: echo "VOTE_REPO=$(terraform output -raw vote_name)" >> $GITHUB_OUTPUT

      - name: Terraform Result Name
        id: result_name
        run: echo "RESULT_REPO=$(terraform output -raw result_name)" >> $GITHUB_OUTPUT

      - name: Terraform Worker Name
        id: worker_name
        run: echo "WORKER_REPO=$(terraform output -raw worker_name)" >> $GITHUB_OUTPUT

  ResultsBuildAndPublish:

    runs-on: ubuntu-latest
    needs: ContainerRegistry
    
    defaults:
     run:
      working-directory: result

    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ needs.ContainerRegistry.outputs.result_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  VoteBuildAndPublish:

    runs-on: ubuntu-latest
    needs: ContainerRegistry
    
    defaults:
     run:
       working-directory: vote
  
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ needs.ContainerRegistry.outputs.vote_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  WorkerBuildAndPublish:

    runs-on: ubuntu-latest
    needs: ContainerRegistry
    
    defaults:
     run:
       working-directory: worker
  
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ needs.ContainerRegistry.outputs.worker_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG